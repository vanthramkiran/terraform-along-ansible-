---
   - name: install Docker and configure docker swarm
     hosts: docker_servers
     become: yes
     become_user: root
     tasks: 
        - name: install docker on all docker_servers
          shell: curl https://get.docker.com | bash

        - name: check docker version
          shell: docker version | grep -w Version | head -1
          register: version
        - debug:
            var: version
     tags:
        - install

   - name: enable docker swarm 
     hosts: docker_master
     become: yes
     become_user: root
     tasks:
        - name: enable docker swarm on master docker_servers
          shell: docker swarm init
          ignore_errors: yes
        - name: get docker worker token
          shell: docker swarm join-token -q worker
          register: token
        - set_fact:
            swarmmanager_token: "{{ managertoken.stdout }}"
        - debug:
            var: swarmmanger_token.stdout
        - name: Get Docker master privatr ipv4
          shell: docker swarm join-token -q manager
          register: managertoken
        - set_facts: 
            swarmmanager_token:: "{{ managertoken.stdout }}"
        - debug:
            var: swarmmanage_token.stdout
        - name: get docker master private 
          shell: curl https://
          register: private_ip
        - set_facts:
             swarm_ip: "{{ private_ip.stdout }}"
        - debug:
              var: private_ip.stdout
        - name: add variable to dummy host 1
          add_host: 
           name: "docker_master_node_token"
           shared_variable: "{{ swarm_token }}"
        - name: add variable to dummy host3
          add_host:
           name: "docker_master_nodeip"
           shared_variable: "{{ swarm_ip }}"
        - name: add variables to dummy host 4
          add_host:
           name: "docker_master_managernode_token"
           shared_variable: "{{ swarmmanager_token }}"

     tags:
      - swarm
   - name: add worker to swarm
     hosts: docker_worker
     become: yes
     become_user: root
     vars: 
      private_ip: "{{ hostvars['docker_master_node_ip'[shared_variable'] }}"
      token: "{{ hostvars['docker_master_node_token']['shared_variable'] }}"
     tasks:
       - debug:
           var: token
       - debug:
           var: private_ip
       -  name: add workers to swarm
          shell: docker swarm join --token "{{ token }}" "{{ private_ip }}":2377
          ignore_errors: yes
     tags:
      - workers

   - name: Add managers to swarm
     hosts: docker_managers
     become: yes
     become_user: root
     vars:
       private_ip: "{{ hostvars['docker_master_node_ip'][shared_variable'] }}
       token: "{{ hostvars['docker_master_managernode_token']['shared_variable'] }}"
     tasks:
       - debug:
           var: token
       - debug:
           var: private_ip
       - name: Add managers to swarm
         shell: docker swarm join --token " {{ token }}" "{{ private_ip }}":2377
         ignore_errors: yes
     tags: 
       - managers
       
   - name: Deploy test application
     hosts: docker_master
     become: yes
     become_user: root
     vars:
       private_ip: "{{ hostvars['docker_master_node_ip']['shared_varibale'] }}"
       token: "{{ hostvars['docker_masternode_token']['shared_variable'] }}"
     tasks: 
       - debug:
           var: token
       - debug:
           var: private_ip
       - name: Delete Docker service If Exists
         shell: docker service rm nginx001
         ignore_errors: yes
       - name: Deploy sample application
         shell: docker service create --name nginx002 -p 8000:80 --replicas 6 sreeharshav/rollingupdate:v5
         ignore_errors: yes
       - name: Deploy sample Application
         shell: sleep 10 && curl http://"{{ private_ip.stdout }}":8000
         resgister: html
         ignore_errors: yes
       - debug: 
           var: html.stdout
     tags: 
       - managers



